{
    "contents" : "```{r, echo = FALSE}\nknitr::opts_chunk$set(\n  eval = FALSE\n  \n)\n```\n---\ntitle: \"NIPTeR: fast and accurate trisomy prediction in non-invasive prenatal testing\"\nauthor: \"Lennart F. Johansson & Hendrik A. de Weerd\"\ndate: \"`r Sys.Date()`\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Vignette Title}\n  %\\VignetteEngine{knitr::rmarkdown}\n  \\usepackage[utf8]{inputenc}\n---\n\n```{r, eval = TRUE, echo = FALSE}\nexample_bin_counts <- structure(c(308, 243, 0, 624, 448, 0, 247, 163, 303, 263, 189, \n637, 249, 174, 266, 216, 270, 262, 287, 257, 274, 213, 234, 244, \n157, 269, 245, 240, 262, 142, 217, 209, 148, 225, 264, 229, 239, \n231, 142, 243, 99, 225, 251, 241, 205, 324, 88, 255, 146, 285, \n258, 251, 241, 355, 264, 259, 236, 259, 242, 216, 244, 383, 230, \n261), .Dim = c(8L, 8L), .Dimnames = list(c(\" 1\", \"2\", \"3\", \"4\", \n\"5\", \"6\", \"7\", \"8\"), c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\n)))\n```\n\n```{r, eval = TRUE, echo = FALSE}\nexample_regression_stats <- structure(c(\"-0.171248675025602\", \"0.00615122686158584\", \"Practical_CV\", \n\"0.583158688871931\", \"11  2  5  12\", \"1.00050469190991\", \"0.00335713985926308\", \n\"-0.799303637284865\", \"0.00599131304613039\", \"Practical_CV\", \n\"0.503865450973465\", \"10  19  17  16\", \"1.00011356353248\", \"0.00394053718934269\"\n), .Dim = c(7L, 2L), .Dimnames = list(c(\"Z_score_sample\", \"CV\", \n\"cv_types\", \"P_value_shapiro\", \"Predictor_chromosomes\", \"Mean_test_set\", \n\"CV_train_set\"), c(\"Prediction_set_1\", \"Prediction_set_2\")))\n```\n\n```{r, eval = TRUE, echo = FALSE}\nexample_bin_counts_sex <- structure(c(0, 0, 160, 0, 6, 0, 266, 0, 127, 0, 85, 0, 182, 0, \n235, 0), .Dim = c(2L, 8L), .Dimnames = list(c(\"X\", \"Y\"), c(\"1\", \n\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\")))\n```\n\n```{r, eval = TRUE, echo = FALSE}\nexample_match_report <- structure(c(6.76557504762928e-07, 2.15862500903867e-06, 3.10100948006486e-06, \n3.29198583437393e-06, 3.58809416090935e-06, 3.83885934221371e-06, \n4.43239735020721e-06, 7.8916102881966e-06, 9.73718696931918e-06, \n1.12605046722957e-05), .Dim = c(10L, 1L), .Dimnames = list(c(\"Sample 6\", \n\"Sample 8\", \"Sample 1\", \"Sample 10\", \"Sample 9\", \"Sample 3\", \"Sample 5\", \n\"Sample 2\", \"Sample 7\", \"Sample 4\"), \"Sum_of_squares\"))\n```\n# NIPTeR package\nThis vignette is an explanation on how to use NIPTeR. It starts with a short introduction, the second chapter explains the two most important objects in this package, `NIPTSample` and `NIPTControlgroup`. The third chapter explains all the analysis functions, the arguments the function take and their output. The last chapter shows some workflow examples.\n\n## Introduction\n\nNon-Invasive Prenatal Testing (NIPT) is a method based on analysis of cell-free fetal (cff) DNA in maternal blood using next-generation sequencing. The basic approach is relatively straightforward: cell-free DNA is isolated from the mothers blood plasma and the obtained DNA fragments are sequenced. Subsequently the number of DNA fragments originating from the different chromosomes is counted, since in case of a fetal trisomy a relative increase of the fraction of reads of the trisomic chromosome is expected.\n\tVarious analysis methods for trisomy prediction, variation reduction and quality control have been described in the literature. These methods can be combined to improve the sensitivity of the analysis. The NIPTeR package makes these methods available and allows for flexibility in workflow design. \nNIPTeR uses BAM files as input and calculates chromosomal fractions, which are used for trisomy prediction. These fractions are based on read counts of the different chromosomes. The chromosomes are divided in bins to allow for read count correction.\n\n\n\n##Package\nThe atomic unit of analysis in this package is a `NIPTSample` object \n\nA `NIPTSample` object is a named list of length 5, having the following fields:\n\n1. `autosomal_chromosome_reads` A list containing the bin count matrices for the autosomal chromosomes. If forward and reverse reads are counted separately the list contains two matrices, if the reads are counted together it contains one. In these matrices the columns represent bins and the 22 rows represent the chromosomes. For a small excerpt of such a matrix see Table 1.\n\n1. `correction_status_autosomal_chromosomes` Correction status of the autosomal chromosomes. Default is _Uncorrected_\n\n1. `sex_chromosome_reads` List containing bin count matrices for the sex chromosomes. If forward and reverse reads are counted separately the list contains two matrices, if the reads are counted together it contains one. In these matrices the columns represent bins and the two represent rows the chromosomes. For a small excerpt of such a matrix see Table 2.\n\n1. `correction_status_sex_chromosome` Correction status of the sex chromosomes. Default is _Uncorrected_\n\n1. `sample_name` The name of the sample. Default is the filename of the .bam it originates from with the path prefix and .bam suffix\n<br><br>\n```{r, eval=TRUE, echo = FALSE, results = \"asis\"}\npander::pandoc.table(example_bin_counts, caption = \"Table 1: Example data bin counts. The rows represent chromosomes and the columns bins\", include.rownames = T)\n```\n<br><br>\n```{r, eval=TRUE, echo = FALSE, results = \"asis\"}\npander::pandoc.table(example_bin_counts_sex, caption = \"Table 2: Example data bin counts sex chromosomes. The rows represent chromosomes and the columns bins\", include.rownames = T)\n```\n\nThe panel of control samples to which the sample of interest can be compared is also modelled in an object, `NIPTControlGroup`. A control group is a named list and composed of `NIPTSample` objects. It has the following fields:\n\n1. `samples` The `NIPTSample` objects\n\n1. `correction_status_autosomal_chromosomes` Correction status of the  autosomal chromosomes of the samples. Default is _Uncorrected_\n\n1. `correction_status_sex_chromosomes` Correction status of the sex chromosomes of the samples. Default is _Uncorrected_\n\n1. `Description` Description of the control group. This can either be _Generic control group_ or _Fitted to sample name_\n\n\n## Functions\n\n### Loading BAM files\n\nTo load a bam file, use the `bin_bam_sample` function. The bam file does not need to be sorted, but its recommended to use pre-sorted bam files \n```{r}\nbin_bam_sample(bam_filepath, do_sort = F, separate_strands = F, custom_name = NULL)\n```\n\nThe arguments `bin_bam_sample` takes:\n\n1. `bam_filepath` The location and filename on the file system where the bam file is stored.\n\n1. `do_sort`  Sort the bam file? If the bam is unsorted set to true, but the use of pre-sorted bam files is recommended.\n\n1. `separate_strands` If set to true, reads from forward and reverse strands are counted and stored separately. This option should be used if you are planning on using regression, since this doubles the number of predictors (F+R) and distributes predictive power more equally over prediction sets since F and R strand from the same chromosome cannot be both in one prediction set. \n\n1. `custom_name` The sample name. Default samplename is the filename of the bam file without the .bam suffix and filepath prefix. \n\n## Variation reduction functions\n\n### GC correction\nGC content bias is the correlation between the number of reads mapped to a specific genomic region and the GC content of this region. In NIPTeR, two GC bias correction algorithms have been implemented, the LOESS based method introduced by Chen et al. (2011) and the bin weight based method described by Fan and Quake (2010).  \n\n```{r}\ngc_correct(nipt_object, method, include_XY = F, span = 0.75)\n```\n \n1. `nipt_object` The object that will be corrected. This can either be a `NIPTSample` or a `NIPTControlGroup` object.\n\n1. `method` To select the LOESS based method use  \"_LOESS_\",  to select the bin weights based method use  \"_bin_\". \n\n1. `include_XY` Also perform correction on the X and Y chromosomes?\n\n1. `span` The span for the LOESS fit. Only applicable when LOESS method is used. \n\n1. `ref_genome` The reference genome used. Either \"_hg37_\" or \"_hg38_\" default = \"_hg37_\"\n\n\nThe output of the gc_correct function is a similar object as the input; when the input is a `NIPTSample` the output will also be a (corrected)\n`NIPTSample`, and the same applies for a `NIPTControlGroup` object. . After correction the correction status of the object is set to _GC_corrected_.\n\nCode snippit:\n```{r}\n#Correct NIPTSample object using LOESS method\nloess_corrected_sample <- gc_correct(nipt_object = sample_of_interest, method = \"LOESS\",\n                                     include_XY = F, span = 0.75)\n#Correct NIPTControlGroup object using bin method\ngc_bin_corrected_control_group <- gc_correct(nipt_object = control_group, method = \"bin\", \n                                             include_XY = T)\n\n```\n\n### Match control group\nThe `matchcontrolgroup` function determines how well an `NIPTSample` fits within the `NIPTControlGroup` and, if needed, makes a subset `NIPTControlGroup` of length _n_.\n```{r}\nmatchcontrolgroup(nipt_sample, nipt_control_group, mode, n_of_samples,\n  include_chromosomes = NULL, exclude_chromosomes = NULL)\n```\nExplanation of the arguments `matchcontrolgroup` takes:\n\n1. `nipt_sample` The `NIPTSample` object that is the focus of the analysis.\n\n1. `nipt_control_group` The `NIPTControlGroup` object used in the analysis.\n\n1. `mode` The function mode. This can either be \"_subset_\" or \"_report_\". Mode \"_subset_\" means the return value will be a new `NIPTControlGroup` object containing  _n_ samples. When mode \"_report_\" is used the output is a matrix containing the sum of squares score of the differences between the chromosomal fractions of the sample and the control for every control sample, sorted in increasing score.\n\n1. `n_of_samples` The length of the resulting NIPTControlGroup. Only applicable if mode \"_subset_\" is used.\n\n1. `include_chromosomes` Include potential trisomic chromosomes into the comparison? Default = NULL, meaning chromosomes 13, 18 and 21 are not included.\n\n1. `exclude_chromosomes` Exclude other autosomal chromosomes besides chromosomes 13, 18 and 21? Default = NULL.\n\nThe output for mode _subset_ is a new `NIPTControlGroup` composed of _n_ samples. \nThe output for mode _report_ is a matrix with a single column containing the sum of squares\nin ascending order.\n\n```{r, eval=TRUE, echo = FALSE, results = \"asis\"}\npander::pandoc.table(example_match_report , caption = \"Table 3: Example match_control_group mode 'subset'\", include.rownames = T)\n```\n\nCode snippit:\n```{r}\n#Run matchcontrolgroup in mode \"report\"\nscores_control_group <- matchcontrolgroup(nipt_sample = gc_LOESS_corrected_sample, \n                                          nipt_control_group = gc_LOESS_corrected_control_group, \n                                          mode = \"report\", include_chromosomes = c(13,18))\n#Run matchcontrolgroup in mode \"subset\" and select 50 best matching samples\nsubset_loess_corrected_control_group <- matchcontrolgroup(nipt_sample = gc_LOESS_corrected_sample, \n                                                          nipt_control_group = loess_corrected_control_group, \n                                                          mode = \"subset\", n_of_samples = 50)\n\n```\n\n### Chi-squared based variation reduction\nThe chi-squared based variation reduction identifies overdispersed bins within the control group and corrects these bins in both the sample of interest and the control group. The function takes in a `NIPTSample` and a `NIPTControlGroup` object, both to be corrected. For every corresponding bin in the control group a chi-squared score is calculated and this total score is converted to a normal distribution. Corresponding bins with a normalized score above _chi_cutoff_ (default 3.5) are corrected by dividing the number of reads by the total chi-squared score divided by degrees of freedom\n\n```{r}\nchi_correct(nipt_sample, nipt_control_group, chi_cutoff = 3.5, include_XY = F)\n```\n\n1. `nipt_sample` The `NIPTSample` object that is the focus of the analysis.\n\n1. `nipt_control_group` The `NIPTControlGroup` object used in the analysis.\n\n1. `chi_cutoff` The normalized cut-off threshold.\n\n1. `include_XY` Also perform correction on the X and Y chromosomes?\n\nThe output of this function is a named list containing two fields, the first field\nis the corrected sample (`$sample`) and the second the corrected control group (`$control_group`). \n\nCode snippit:\n```{r}\n#Apply chi-squared based variation reduction method\nchi_corrected_data <- chicorrect(nipt_sample = gc_LOESS_corrected_sample, \n                                 nipt_control_group = subset_loess_corrected_control_group)\n#Extract sample and control group\nloess_chi_corrected_sample <- chi_corrected_data$sample\nsubset_loess_chi_corrected_control_group <- chi_corrected_data$control_group\n```\n\n## Trisomy prediction functions\n\n### Z-score\n\nIn the Z-score approach, introduced by Chiu et al in 2008, the chromosomal fraction of interest of a sample is compared to the chromosomal fractions of interest of the reference samples, the `NIPTControlGroup` object. \n\n```{r}\ncalculate_z_score(nipt_sample, nipt_control_group, chromo_focus)\n```\n<br>\nThis function takes three arguments:\n\n1. `nipt_sample` The `NIPTSample` object that is the focus of the analysis.\n\n1. `nipt_control_group`  The `NIPTControlGroup` object used in the analysis.\n\n1. `chromo_focus` The chromosome of interest. Most commonly chromosome 13, 18 or 21. However, every autosomal chromosome can be predicted.\n\n<br>\n\nThe output of the function is an object of class `ZscoreResult`. It is a named list containing seven fields:\n\n1. `sample_Zscore` A numeric, The Z score for the sample of interest for the sample of interest.\n\n1. `control_group_statistics` Named num of length 3, the first field being the mean (name mean), the second field is the standard deviation (name SD) and the third field is the P value of the Shapiro-Wilk test (name Shapiro_P_value).\n\n1. `control_group_Zscores` Matrix containing the Z scores of the chromosome of interest for all used control samples.\n\n1. `focus_chromosome` The chromosome of interest. Most commonly chromosome 13, 18 or 21. However, every autosomal chromosome can be predicted.\n\n1. `control_group_sample_names` The sample names of all control group samples used in the analysis.\n\n1. `correction_status` The correction status of the control group.\n\n1. `sample_name` The sample_name of the sample of interest.\n\nCode snippit:\n```{r}\n#Calculate Z score for chromosome 13\nz_score_result_13 <- calculate_z_score(nipt_sample = loess_chi_corrected_sample, \n                                       nipt_control_group = subset_loess_chi_corrected_control_group,\n                                       chromo_focus = 13)\n```\n\n### Regression based Z-score\n\nThe regression based Z-score builds _n_ models with _m_ predictors using stepwise regression with forward selection. The models are used to predict the chromosomal fraction of interest, for the sample and for the control group. The observed fractions are then divided by the expected fraction, and Z-scores are calculated over these ratios. The Z-score is calculated by subtracting one from the ratio of the sample and dividing this result by the coefficient of variation. The coefficient of variation (CV) can either be the _Practical_ or _Theoretical_ CV. The Theoretical CV is the standard error multiplied by the overdispersion. Theoretically, the CV cannot be lower than the standard error of the mean. If it is case the CV is lower than Theoretical CV, then the Theoretical CV is used.  \n\n```{r}\nperform_regression(nipt_sample, nipt_control_group, chromo_focus,\n  n_models = 4, n_predictors = 4, exclude_chromosomes = NULL,\n  include_chromosomes = NULL, use_test_train_set = T,\n  size_of_train_set = 0.6, overdispersion_rate = 1.15,\n  force_practical_vc = F)\n```\n\n1. `nipt_sample` The `NIPTSample` object that is the focus of the analysis.\n\n1. `nipt_control_group` The `NIPTControlGroup` object used in the analysis.\n\n1. `chromo_focus` The chromosome of interest. Most commonly chromosome 13, 18 or 21. However, every autosomal chromosome can be predicted.\n\n1. `n_models` Number of linear models to be made. Default setting is 4 models.\n\n1. `n_predictors` The number of predictors each model contains. Default is 4.\n\n1. `exclude_chromosomes` Exclude which autosomal chromosomes as potential predictors? Default potential trisomic chromosomes 13, 18 and 21 are exluded. \n\n1. `include_chromosomes` Include potential trisomic chromosomes? Options are: chromosomes 13, 18 and 21.\n\n1. `use_test_train_set` Use a test and train set to build the models? Default is TRUE.\n\n1. `size_of_train_set` The size of the train set expressed in a decimal. Default is 0.6 (60% of the control samples).\n\n1. `overdispersion_rate` The standard error of the mean is multiplied by this factor. \n\n1. `force_practical_vc` Ignore the theoretical CV and always use the practical CV.\n\nThe output of this function is an object of type `RegressionResult`, a named list containing: \n\n1. `prediction_statistics` A dataframe with 7 rows and a column for every model. Table 3 is an example of such a dataframe.\n\n```{r, eval=TRUE, echo = FALSE, results = \"asis\"}\npander::pandoc.table(example_regression_stats, caption = \"Table 2: Example regression results and statistics\", include.rownames = T)\n```\n\n\n1. `control_group_Zscores` A matrix containing the regression based Z-scores for the control sample\n\n1. `focus_chromosome` The chromosome of interest. Most commonly chromosome 13, 18 or 21. However, every autosomal chromosome can be predicted.\n\n1. `correction_status` The correction status of the control group autosomes.\n\n1. `control_group_sample_names` The sample names of the test set group.\n\n1. `models` List of the summary.lm() output for every model.\n\n1. `potential_predictors` The total pool of chromosomes where the predictors are selected from.\n\n1. `all_control_group_Z_scores` Z-scores for every sample using theoretical and practical VCs.\n\n1. `additional_statistics` Statistics for both the practical and theoretical CVs for every prediction set.\n\n\n### Normalized Chromosome Value\n<br>\nThe Normalized Chromosome Value or NCV (Sehnert et al., 2011) method selects a subset of chromosomes to calculate the chromosomal fractions. The 'best' subset is the set which yields the lowest coefficient of variation for the chromosomal fractions of the chromosome of interest in the control group. Because a brute force approach is used to determine the best subset, which can be computationally intensive,this method is divided into two functions, `prepare_ncv` and `calculate_ncv`. `prepare_ncv` returns a template object (NCVTemplate) for a given chromosome of interest and the control group used. This template can be used for any number of analyses. If the control group or chromosome of interest changes, a new template must be made. <br>\n`calculate_ncv` uses a NCVTemplate and a NIPTSample to calculate the NCV score for the NIPTSample.\n\n#### prepare_ncv\n\n```{r}\nprepare_ncv(nipt_control_group, chr_focus, max_elements,\n  exclude_chromosomes = NULL, include_chromosomes = NULL,\n  use_test_train_set = T, size_of_train_set = 0.6)\n```\n\n1. `nipt_control_group` The `NIPTControlGroup` object used in the analysis.\n\n1. `chr_focus` The chromosome of interest. Most commonly chromosome 13, 18 or 21. However, every autosomal chromosome can be predicted.\n\n1. `max_elements` The maximum number of denominator chromosomes. \n\n1. `exclude_chromosomes` Exclude which autosomal chromosomes as potential predictors? Default potential trisomic chromosomes 13, 18 and 21 are exluded. \n\n1. `include_chromosomes` Include potential trisomic chromosomes? Options are: chromosomes 13, 18 and 21.\n\n1. `use_test_train_set` Use a test and train set to to build the models? Default is TRUE.\n\n1. `size_of_train_set` The size of the train set expressed in a decimal. Default is 0.6 (60% of the control group samples).\n\nThe output of this function is an object of class NCVTemplate, a named list.\n\n1. `denominators` The set of 'best' denominators.\n\n1. `focus_chromosome` The chromosome of interest used for this `NCVTemplate` object.\n\n1. `control_group_sample_names` The sample names of the test set samples.\n\n1. `correction_status` The correction status of the `NIPTControlGroup` used.\n\n1. `control_group_Zscores` The NCV scores for the test set samples.\n\n1. `potential_denominators` The total pool of denominators the best denominators are selected from.\n\n1. `control_group_statistics`  Named num of length 3, the first field being the mean (name mean), the second field is the standard deviation (name SD) and the third field is the P value of the Shapiro-Wilk test (name Shapiro_P_value).\n\n1. `sample_names_train_set` The names of the samples used in the train set.\n\n1. `train_set_statistics` Named num of length 3, the first field being the mean of the train set (name mean), the second field is the standard deviation of the train set (name SD) and the third field is the P value of the Shapiro-Wilk test of the train set (name Shapiro_P_value).\n\n1. `train_set_Zscores`  Matrix containing the Z scores for the train set samples.\n\n<br>\n\n#### calculate_ncv\n\n```{r}\ncalculate_ncv_score(nipt_sample, ncv_template)\n```\n\n1. `nipt_sample` The `NIPTSample` object that is the focus of the analysis.\n\n1. `ncv_template` An object of class NCVTemplate that is produced by function `prepare_ncv`\n\n\nThe output of this function is an object of class NCVResult, which is basically the same as a NCVTemplate object,\nthe only difference being the NCV score of the sample appended to the list.\n\n##Control group functions\n\n#### as_control_group\nThis functions converts a list of `NIPTSample` objects to a `NIPTControlGroup` object and return this object.\n```{r}\nas_control_group(nipt_samples)\n```\n\n1 `nipt_samples` A list of `NIPTSample` objects. \n\nThis functions adds `NIPTSample` objects to an existing control group and returns a new `NIPTControlGroup` object.\n<br><br>\n\n#### add_samples_controlgroup\n\n```{r}\nadd_samples_controlgroup(nipt_control_group, samples_to_add)\n```\n\n1. `nipt_control_group` The `NIPTControlGroup` to add the samples to.\n\n1. `samples_to_add` A list with sample(s) to add. This always needs to be a list.\n\n\n<br>\n\n#### remove_duplicates_controlgroup\n\nThis functions removes duplicate samples from the control group based on name. It returns a new `NIPTControlGroup` object.\n\n```{r}\nremove_duplicates_controlgroup(nipt_control_group)\n```\n\n1. `nipt_control_group` The `NIPTControlGroup` object to remove duplicates from.\n<br><br>\n\n#### remove_sample_controlgroup\nThis function removes a sample from the `NIPTControlGroup` object by name. Note that this function uses a regular expression, and if more sample_names satisfy the regular expression, they will also be removed. It returns a new `NIPTControlGroup` object. \n<br><br>\n```{r}\nremove_sample_controlgroup(samplename, nipt_control_group)\n```\n\n1. `samplename` samplename Regular expression string. All matching samplenames \nare removed from the control group.\n\n1. `nipt_control_group` `NIPTControlGroup` object where the samples are removed from.\n<br>\n\n#### diagnose_control_group\n\nThis function computes a regular Z-score for every chromosome of every sample in the `NIPTControlGroup` object. It returns a named list with diagnostics information.\n<br><br>\n```{r}\ndiagnose_control_group(nipt_control_group)\n```\n\n1. `nipt_control_group` The `NIPTControlGroup` to diagnose.\n\n<br>\n\nThe function returns a named list with 3 fields:\n\n1. `Z_scores` A matrix containing Z-scores for every sample and every chromosome.\n\n1. `abberant_scores` Dataframe with samplename and chromosome of Z-scores outside -3  3 range. \n\n1. `control_group_statistics` Matrix with mean, standard deviation and P value of Shapiro-Wilk test.\n<br>\n\n#Examples\n\n<br>\n\n##Preparation\n\n<br>\n\n### Control group\nSince NIPT is based on the comparison of the sample of interest to a set of samples with no known aneuploidies, the first thing that should be done before any samples can be analyzed is making this `NIPTControlGroup`. A `NIPTControlGroup` is an object and is composed of `NIPTSample` objects. \nFirst, all bam file paths have to be collected in a vector. This tutorial assumes all .bam files are in the same directory. To collect all bam files the following command can be used:\n\n`bam_filepaths <- list.files(path = \"/Path/to/bamfiles/\", pattern = \".bam\", full.names = T)`\n\nSubsequently, the filepaths must be fed to the function `bin_bam_sample`. This function loads bam files and converts them to `NIPTSample` objects. For example:      \n\n```{r}\n\nlist_NIPT_samples <- lapply(X = bam_filepaths, bin_bam_sample, do_sort = FALSE, \n                             separate_strands = T, custom_name = NULL)\n\n```\n     \n\nIn this example we count the forward and reverse reads separately and a pre-sorted bam file is used, so the argument do_sort is ommited since the default is F. \n\n\n\nUsing the above command all samples will be loaded with the same default settings. To load the files with for instance custom names, store the filenames in a vector of the same length as the bam filepath vector and use `mapply`. For example:        \n      \n          \n`list_NIPT_samples <- mapply(FUN = bin_bam_sample, bam_filepaths, name = names, SIMPLIFY = F)`\n     \n\nTo convert the list of `NIPTSamples` to a `NIPTControlGroup` object use:\n\n`control_group <- as_control_group(nipt_samples = list_NIPT_samples)`\n\nof course, the fastest and simplest way is to wrap the `as_control_group` function around the loading of samples like this: <br><br>\n```{r}\ncontrol_group  <- as_control_group(nipt_samples = lapply(X = bam_filepaths, bin_bam_sample, \n                                                         do_sort = F, separate_strands = T))\n```\n   \n<br> or when applying custom names: <br><br>\n\n```{r}\ncontrol_group  <- as_control_group(nipt_samples = mapply(FUN = bin_bam_sample, bam_filepaths, \n                                                         custom_name = names, SIMPLIFY = FALSE))\n```\n\n<br> To store the control group on disk for later use:\n\n`saveRDS(object = control_group, file = \"/Path/to/directory/control_group.rds\")`\n\nSo, in conclusion, the data control group preparation script might look something like this: \n<br>\n```{r}\nlibrary(NIPTeR)\n#Retrieve filenames\nbam_filepaths <- list.files(path = \"/Path/to/bamfiles/\", pattern = \".bam\", full.names = T)\n#Load files and convert to control group\ncontrol_group  <- as_control_group(nipt_samples = lapply(X = bam_filepaths, bin_bam_sample, \n                                                         do_sort = F, separate_strands = FALSE))\n#Save control group for later\nsaveRDS(object = control_group, file = \"/Path/to/directory/control_group.rds\")\n```\n\nAssuming a `NIPTControlGroup` object has been prepared and stored on disk we can analyse our first sample. The script starts with loading the `NIPTeR` package:\n\n`library(NIPTeR)`\n\nAfter that, we can load a sample of interest with the `bin_bam_sample` function:\n\n`sample_of_interest <- bin_bam_sample(bam_filepath = \"/path/to/sample.bam\",  separate_strands = T)`\n\n<br>\n<p>\n![Figure 1: An example of a control group workflow.](figures/control_group_workflow.png)\n<figcaption> A possible workflow to create a control group is shown in figure 1. In this example first a list of samples to include in the control group is created (1a) and bin counts are created for each of those samples (1b). Secondly, all samples in the control group are LOESS gc corrected (2a). Thirdly, the resulting control group is checked for samples having aberrant scores (3a) and if present, those samples are removed (3b). The resulting control group is than saved.\n</figcaption>\n</p>\n\n```{r}\nlibrary(NIPTeR)\n#Gather all bam filepaths in a vector. Corresponds to 1a in figure\nbam_filepaths <- list.files(path = \"/Path/to/bamfiles/\", pattern = \".bam\", full.names = T)\n#Load all bam files using lapply and feed the results to function as_control_group,\n#converting the NIPTSamples to a NIPTControlGroup object. Corresponds to 1b in figure\ncontrol_group  <- as_control_group(nipt_samples = lapply(X = bam_filepaths, bin_bam_sample,\n                                                         do_sort = F, separate_strands = F))\n#apply a gc LOESS correction to all samples. Since this can take up to 30 seconds\n#sample, doing this once for a control group and store the results can be rewarding\n#in terms of analysis time. Corresponds to 2a in figure\ngc_control_group <- gc_correct(nipt_object = control_group, method = \"LOESS\")\n#Retrieve control group diagnostics. Corresponds with 3a in figure\ncontrol_group_diagnostics <- diagnose_control_group(nipt_control_group = control_group)\n#Retrieve samplenames with an abberant Z score for any chromosome and remove these samples \n#from the control group. Corresponds with 3b in figure\nabberant_sample_names <- unique(control_group_diagnostics$abberant_scores$Sample_name)\nfor (i in 1:length(abberant_sample_names)){\n  control_group <- remove_sample_controlgroup(samplename = abberant_sample_names[i], \n                                              nipt_control_group = control_group)\n}\n#Save the gc_corrected control groups to disk. Corresponds to 4a in figure\nsaveRDS(object = control_group, file = \"/path/to/controlgroup.rds\")\n```\n\n\n\n\n<br>\n<p>\n![Figure 2: An example of a simple workflow.](figures/simple_workflow.png)\n<figcaption>  An example of a simple workflow, including a chi-squared based variation reduction and a trisomy prediction using the regression-based Z-score is shown in figure 2. Firstly, bin counts are made for the analysed sample (1a) and a relevant control group is loaded (1b). Secondly, using the control group, both the analysed sample and the control samples are chi_corrected (2a). Thirdly, the corrected control group is used to create a regression model for a trisomy 21 prediction of the NIPT sample (3a). Results can be gathered from the workspace.\n</figcaption>\n</p>\n```{r}\nlibrary(NIPTeR)\n#Load sample. Corresponds with 1a in figure\nsample_of_interest <- bin_bam_sample(bam_filepath = \"/Path/to/bamfile.bam\", separate_strands = T)\n#Load control group. Corresponds with 1b in figure\ncontrol_group <- readRDS(\"/Path/to/control_group.rds\")\n#Perform a chi-square based variation reduction on new trimmed control group and sample and\n#extract data. Corresponds with 2a in figure\nchi_data <- chi_correct(nipt_sample = sample_of_interest, nipt_control_group = control_group)\nsample_of_interest <- chi_data$sample\ncontrol_group <- chi_data$control_group\n#Perform regression for chromosome 21 with default settings, so:\n#Create 4 models with 4 predictors each\n#All chromosomes are potential predictors except the potential trisomic chromosomes 13, 18 and 21\n#Use a test and train set where the size of the train set is 60% of the control group\n#Assume at least 15% overdispersion in the data\n#Dont force practical CV, so if the CV is below 1.15 * standard error of the mean use this as VC\n#Corresponds with 3a in figure\nregression_score_21 <- perform_regression(nipt_sample = sample_of_interest, \n                                          nipt_control_group = control_group, chromo_focus = 21)\n\n\n###       Gather relevant data from the objects on the workspace     #######\n```\n<br>\n\n<br>\n<p>\n![Figure 3: An example of a complex workflow.](figures/complex_workflow.png)\n<figcaption>An example of a simple workflow, including a GC correction, selection of a control group fitted to the sample, a chi-squared based variation reduction, automatic control group managing and trisomy prediction using the Z-score, NCV and the regression-based Z-score is shown in figure 3. Firstly, bin counts are made for the analysed sample (1a) and a relevant control group is loaded (1b).\nSecondly, variability is reduced  by LOESS gc correcting the sample of interest and all samples in the control group (2a), followed by a selection of the 80% of control samples that best match the control sample for further analysis of the sample of interest (2b).  Using the control group, both the analysed sample and the control samples are than chi_corrected (2c). \nThirdly, the resulting control group is checked for samples having aberrant scores (3a) and if present, those samples are removed (3b).\nFourthly, a Z-score is calculated for chromosomes 13, 18 and 21 (4a), as well as a regression-based Z-score (4b). Furthermore, the best denominators for NCV calculation of chromosomes 13, 18 and 21 are determined (4c) and the NCV is calculated for those chromosomes (4d).\nResults can be gathered from the workspace.\n\n</figcaption>\n</p>\n```{r}\nlibrary(NIPTeR)\n#Load sample. Corresponds with 1a in figure\nsample_of_interest <- bin_bam_sample(bam_filepath = \"/Path/to/bamfile.bam\")\n#Load control group. Corresponds with 1b in figure\ncontrol_group <- readRDS(\"/Path/to/control_group.rds\")\n#Peform a GC correction type bin for the sample and the controlgroup\n#Corresponds with 2a in figure\nsample_of_interest <- gc_correct(nipt_object = sample_of_interest, method = \"bin\")\ncontrol_group <- gc_correct(nipt_object = control_group, method = \"bin\")\n#Trim control group by only selecting 80% of best matching control samples\n#Corresponds with 2b in figure\ncontrol_group <- match_control_group(nipt_sample = sample_of_interest, nipt_control_group = control_group, \n                                     mode = \"subset\", n_of_samples = round(length(control_group$samples) *.8, \n                                                                           digits = 0))\n#Perform a chi-square based variation reduction on new trimmed control group and sample and\n#extract data. Corresponds with 2c in figure\nchi_data <- chi_correct(nipt_sample = sample_of_interest, nipt_control_group = control_group)\nsample_of_interest <- chi_data$sample\ncontrol_group <- chi_data$control_group\n#Retrieve control group diagnostics. Corresponds with 3a in figure\ncontrol_group_diagnostics <- diagnose_control_group(nipt_control_group = control_group)\n#Retrieve samplenames with an abberant Z score for any chromosome and remove these samples \n#from the control group. Corresponds with 3b in figure\nabberant_sample_names <- unique(control_group_diagnostics$abberant_scores$Sample_name)\nfor (i in 1:length(abberant_sample_names)){\n  control_group <- remove_sample_controlgroup(samplename = abberant_sample_names[i], \n                                              nipt_control_group = control_group)\n}\n#Calculate Z score from chromosomes 13, 18 and 21. Corresponds with 4a in figure \nz_score_13 <- calculate_z_score(nipt_sample = sample_of_interest, \n                                nipt_control_group = control_group, chromo_focus = 13)\nz_score_18 <- calculate_z_score(nipt_sample = sample_of_interest, \n                                nipt_control_group = control_group, chromo_focus = 18)\nz_score_21 <- calculate_z_score(nipt_sample = sample_of_interest, \n                                nipt_control_group = control_group, chromo_focus = 21)\n#Perform regression for all potential trisomic chromosomes with default settings, so:\n#Create 4 models for every potential trisomic chromosome with 4 predictors each\n#All chromosomes are potential predictors except the potential trisomic chromosomes 13, 18 and 21\n#Use a test and train set where the size of the train set is 60% of the control group\n#Assume at least 15% overdispersion in the data\n#Dont force practical CV, so if the CV is below 1.15 * standard error of the mean use this as VC\n#Corresponds with 4c in figure\nregression_score_13 <- perform_regression(nipt_sample = sample_of_interest, \n                                          nipt_control_group = control_group, chromo_focus = 13)\nregression_score_18 <- perform_regression(nipt_sample = sample_of_interest, \n                                          nipt_control_group = control_group, chromo_focus = 18)\nregression_score_21 <- perform_regression(nipt_sample = sample_of_interest, \n                                          nipt_control_group = control_group, chromo_focus = 21)\n#Get NCVTemplates for all potential trisomic chromosomes with max 9 denominators and default settings, so:\n#All autosomals chromosomes are potential predictors, except the potential trisomic chromosomes 13, 18 and 21\n#Use a test and train set where the size of the train set is 60% of the control group\n#Corresponds with 4c in figure\nnew_ncv_template_13 <- prepare_ncv(nipt_control_group = control_group, chr_focus = 13, max_elements = 9)\nnew_ncv_template_18 <- prepare_ncv(nipt_control_group = control_group, chr_focus = 18, max_elements = 9)\nnew_ncv_template_21 <- prepare_ncv(nipt_control_group = control_group, chr_focus = 21, max_elements = 9)\n#Use the NCVTemplates to get NCV scores for the sample of interest\n#Corresponds with 4d in figure\nncv_score_13 <- calculate_ncv_score(nipt_sample = sample_of_interest, ncv_template = new_ncv_template_13)\nncv_score_18 <- calculate_ncv_score(nipt_sample = sample_of_interest, ncv_template = new_ncv_template_18)\nncv_score_21 <- calculate_ncv_score(nipt_sample = sample_of_interest, ncv_template = new_ncv_template_21)\n\n\n###       Gather relevant data from the objects on the workspace     #######\n\n\n\n```\n<br>\n",
    "created" : 1445518585212.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3720494182",
    "id" : "DD35C16A",
    "lastKnownWriteTime" : 1446642506,
    "path" : "~/NIPTeR/NIPTeR/vignettes/NIPTeRV2.Rmd",
    "project_path" : "vignettes/NIPTeRV2.Rmd",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_markdown"
}