}
add_zero <- rep(x = 0, total_bins_length - length(gc_bins))
gc_matrix <- cbind(gc_matrix, c(gc_bins, ))
}
gc_matrix <- NULL
for (p in 1:length(gc_percs_list)){
gc_bins <- gc_percs_list[[p]]
if (p == 1){
total_bins_length = length(gc_bins)
}
add_zero <- rep(x = 0, total_bins_length - length(gc_bins))
gc_matrix <- cbind(gc_matrix, c(gc_bins, add_zero ))
}
View(gc_matrix)
View(gc_matrix)
gc_matrix <- NULL
for (p in 1:length(gc_percs_list)){
gc_bins <- gc_percs_list[[p]]
if (p == 1){
total_bins_length = length(gc_bins)
}
add_zero <- rep(x = 0, total_bins_length - length(gc_bins))
gc_matrix <- rbind(gc_matrix, c(gc_bins, add_zero ))
}
View(gc_matrix)
for (i in 1:24){
current_chr <- BSgenome.Hsapiens.UCSC.hg38@single_sequences[[chrs[i]]]
letter_matrix <-letterFrequencyInSlidingView(x = current_chr, view.width = bin_size, letters = dna_letters)
intervals <- seq(from = 1, to = length(current_chr)-bin_size, by = bin_size)
relevant_rows <- letter_matrix[intervals, ]
gc_percs_list[[i]] <- c(apply(X = relevant_rows, MARGIN = 1, FUN = calculate_gc, bin_size = bin_size), -1)
}
gc_matrix <- NULL
for (p in 1:length(gc_percs_list)){
gc_bins <- gc_percs_list[[p]]
if (p == 1){
total_bins_length = length(gc_bins)
}
add_zero <- rep(x = 0, total_bins_length - length(gc_bins))
gc_matrix <- rbind(gc_matrix, c(gc_bins, add_zero ))
}
calculate_gc <- function(genomic_region, bin_size){
n_perc <- (genomic_region[5] / bin_size) * 100
if (n_perc >= 99){
gc_perc <- -1
return (gc_perc)
}
else{
gc_perc <- (sum(genomic_region[3:4]) / (bin_size - genomic_region[5]) * 100
return (gc_perc)
}
}
calculate_gc <- function(genomic_region, bin_size){
n_perc <- (genomic_region[5] / bin_size) * 100
if (n_perc >= 99){
gc_perc <- -1
return (gc_perc)
}
else{
gc_perc <- (sum(genomic_region[3:4])) / (bin_size - genomic_region[5]) * 100
return (gc_perc)
}
}
for (i in 1:24){
current_chr <- BSgenome.Hsapiens.UCSC.hg38@single_sequences[[chrs[i]]]
letter_matrix <-letterFrequencyInSlidingView(x = current_chr, view.width = bin_size, letters = dna_letters)
intervals <- seq(from = 1, to = length(current_chr)-bin_size, by = bin_size)
relevant_rows <- letter_matrix[intervals, ]
gc_percs_list[[i]] <- c(apply(X = relevant_rows, MARGIN = 1, FUN = calculate_gc, bin_size = bin_size), -1)
}
for (p in 1:length(gc_percs_list)){
gc_bins <- gc_percs_list[[p]]
if (p == 1){
total_bins_length = length(gc_bins)
}
add_zero <- rep(x = 0, total_bins_length - length(gc_bins))
gc_matrix <- rbind(gc_matrix, c(gc_bins, add_zero ))
}
gc_matrix <- NULL
for (p in 1:length(gc_percs_list)){
gc_bins <- gc_percs_list[[p]]
if (p == 1){
total_bins_length = length(gc_bins)
}
add_zero <- rep(x = 0, total_bins_length - length(gc_bins))
gc_matrix <- rbind(gc_matrix, c(gc_bins, add_zero ))
}
View(gc_matrix)
gc_matrix_50k <- gc_matrix
dna_letters <- c("A", "T", "C", "G", "N")
bin_size = 20000
gc_matrix <- NULL
gc_percs_list <- list()
chrs <- paste0("chr", c(1:22, "X", "Y"))
for (i in 1:24){
current_chr <- BSgenome.Hsapiens.UCSC.hg38@single_sequences[[chrs[i]]]
letter_matrix <-letterFrequencyInSlidingView(x = current_chr, view.width = bin_size, letters = dna_letters)
intervals <- seq(from = 1, to = length(current_chr)-bin_size, by = bin_size)
relevant_rows <- letter_matrix[intervals, ]
gc_percs_list[[i]] <- c(apply(X = relevant_rows, MARGIN = 1, FUN = calculate_gc, bin_size = bin_size), -1)
}
for (p in 1:length(gc_percs_list)){
gc_bins <- gc_percs_list[[p]]
if (p == 1){
total_bins_length = length(gc_bins)
}
add_zero <- rep(x = 0, total_bins_length - length(gc_bins))
gc_matrix <- rbind(gc_matrix, c(gc_bins, add_zero ))
}
View(gc_matrix)
data("/Users/dirkdeweerd/NIPTeR/NIPTeR/R/sysdata.rda")
library(NIPTeR)
data("/Users/dirkdeweerd/NIPTeR/NIPTeR/R/sysdata.rda")
read <- data("/Users/dirkdeweerd/NIPTeR/NIPTeR/R/sysdata.rda")
read
data(read)
read <- data("/Users/dirkdeweerd/NIPTeR/NIPTeR/R/sysdata.rda")
data("/Users/dirkdeweerd/NIPTeR/NIPTeR/R/sysdata.rda")
data("/Users/dirkdeweerd/NIPTeR/NIPTeR/R/sysdata.rda")
load("/Users/dirkdeweerd/NIPTeR/NIPTeR/R/sysdata.rda")
calculate_gc <- function(genomic_region, bin_size){
n_perc <- (genomic_region[5] / bin_size) * 100
if (n_perc >= 99){
gc_perc <- -1
return (gc_perc)
}
else{
gc_perc <- (sum(genomic_region[3:4])) / (bin_size - genomic_region[5]) * 100
return (gc_perc)
}
}
dna_letters <- c("A", "T", "C", "G", "N")
bin_size = 50000
gc_matrix <- NULL
gc_percs_list <- list()
chrs <- paste0("chr", c(1:22, "X", "Y"))
for (i in 1:24){
current_chr <- BSgenome.Hsapiens.UCSC.hg38@single_sequences[[chrs[i]]]
letter_matrix <-letterFrequencyInSlidingView(x = current_chr, view.width = bin_size, letters = dna_letters)
intervals <- seq(from = 1, to = length(current_chr)-bin_size, by = bin_size)
relevant_rows <- letter_matrix[intervals, ]
gc_percs_list[[i]] <- c(apply(X = relevant_rows, MARGIN = 1, FUN = calculate_gc, bin_size = bin_size), -1)
}
for (p in 1:length(gc_percs_list)){
gc_bins <- gc_percs_list[[p]]
if (p == 1){
total_bins_length = length(gc_bins)
}
add_zero <- rep(x = 0, total_bins_length - length(gc_bins))
gc_matrix <- rbind(gc_matrix, c(gc_bins, add_zero ))
}
View(gc_matrix)
View(gc_percentages)
View(gc_matrix)
View(gc_percentages)
View(gc_matrix)
View(gc_matrix)
View(gc_matrix)
View(gc_percentages)
View(gc_matrix)
gc_percentages_GRCh37 <- gc_percentages
gc_percentages_GRCh38 <- gc_matrix
gc_percentages_hg37 <- gc_percentages
gc_percentages_hg38 <- gc_matrix
rm(add_zero, bin_size, chrs, current_chr)
rm(dna_letters, gc_bins, gc_percs_list)
rm(intervals, i)
rm(p)
rm(total_bins_length)
autosomal_38 <- gc_percentages_hg38[1:22,]
sex_38 <- gc_percentages_hg38[23:24,]
View(autosomal_38)
which(autosomal_38 > 30 & autosomal_38 < 40)
indexi = which(autosomal_38 > 30 & autosomal_38 < 40)
which(autosomal_38 > 38 & autosomal_38 < 39)
which(autosomal_38 > 38.9 & autosomal_38 < 39)
which(autosomal_38 > 30.9 & autosomal_38 < 31)
min(autosomal_38[autosomal_38 > 1])
which.min(autosomal_38[autosomal_38 > 1])
arrayInd(which.min(autosomal_38[autosomal_38 > 1]))
max(autosomal_38[autosomal_38 > 1])
max(gc_percentages_hg37)
which.min(autosomal_38[autosomal_38 > 1], arr.ind = TRUE)
which(autosomal_38[33478], arr.ind = TRUE)
which(autosomal_38[autosomal_38 > 1])
which(autosomal_38 > 22 & autosomal_38 < 23)
which(autosomal_38 > 22 & autosomal_38 < 23, arr.ind = T)
gc_percentages_hg37[13,1725]
gc_percentages_hg37[13,1720:1730]
autosomal_37 <- gc_percentages_hg37[1:22]
autosomal_37[13,1720:1730]
autosomal_37 <- gc_percentages_hg37[1:22,]
autosomal_37[13,1720:1730]
autosomal_38[13,1720:1730]
chr13 <- autosomal_37[13,]
length(chr13[chr13 > 1])
chr13 <- autosomal_38[13,]
length(chr13[chr13 > 1])
min(autosomal_38[autsomal > 1])
min(autosomal_38[autosomal38 > 1])
min(autosomal_38[autosomal_38 > 1])
max(autosomal_38)
intervals <- seq(from = 22.1, to = 72.6, by =.1)
intervals <- seq(from = 22.1, to = 72.7, by =.1)
intervals <- seq(from = 22.1, to = 72.7, by =.1)
for (i in 1:length(intervals)-1){
gc_percentage_indices_38 <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[i+1])
}
which(autosomal_38 > 22 & autosomal_38 < 23, arr.ind = T)
which(autosomal_38 > 22 & autosomal_38 < 23)
intervals <- seq(from = 22.1, to = 72.7, by =.1)
for (i in 1:length(intervals)-1){
gc_percentage_indices_38 <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[i+1])
}
intervals
gc_percentage_indices_38 = list()
for (i in 1:length(intervals)-1){
gc_percentage_indices_38[[i]] <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[i+1])
}
for (i in 1:length(intervals)-1){
gc_percentage_indices_38[[i]] <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[(i+1)])
}
for (i in 1:length(intervals)-1){
print(i)
#gc_percentage_indices_38[[i]] <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[(i+1)])
}
dna_letters <- c("A", "T", "C", "G", "N")
bin_size = 50000
gc_matrix <- NULL
gc_percs_list <- list()
chrs <- paste0("chr", c(1:22, "X", "Y"))
for (i in 13:13){
current_chr <- BSgenome.Hsapiens.UCSC.hg38@single_sequences[[chrs[i]]]
letter_matrix <-letterFrequencyInSlidingView(x = current_chr, view.width = bin_size, letters = dna_letters)
intervals <- seq(from = 1, to = length(current_chr)-bin_size, by = bin_size)
relevant_rows <- letter_matrix[intervals, ]
gc_percs_list[[i]] <- c(apply(X = relevant_rows, MARGIN = 1, FUN = calculate_gc, bin_size = bin_size), -1)
}
for (p in 1:length(gc_percs_list)){
gc_bins <- gc_percs_list[[p]]
if (p == 1){
total_bins_length = length(gc_bins)
}
add_zero <- rep(x = 0, total_bins_length - length(gc_bins))
gc_matrix <- rbind(gc_matrix, c(gc_bins, add_zero ))
}
for (i in 13:13){
current_chr <- BSgenome.Hsapiens.UCSC.hg38@single_sequences[[chrs[i]]]
letter_matrix <-letterFrequencyInSlidingView(x = current_chr, view.width = bin_size, letters = dna_letters)
intervals <- seq(from = 1, to = length(current_chr)-bin_size, by = bin_size)
relevant_rows <- letter_matrix[intervals, ]
gc_percs_list[[i]] <- c(apply(X = relevant_rows, MARGIN = 1, FUN = calculate_gc, bin_size = bin_size), -1)
}
View(letter_matrix)
1725 * 50000
letter_matrix[86250000,]
letter_matrix[86240090:86250010,]
letter_matrix[86249990:86250010,]
letter_matrix[86241990:86250010,]
letter_matrix[86231990:86240010,]
letter_matrix[86259990:86260010,]
test <- letter_matrix[86059990:86960010,]
min(test[,4])
min(test[,3])
which.min(test[,3])
test[142800:143000]
test[142800:143000,]
test[142600:142900,]
test[142400:142600,]
86059990 / 50000
86960010 / 50000
test <- letter_matrix[86059990:86960010,]
View(test)
View(test)
test2 <- letter_matrix[86200000:86350000,]
View(test2)
View(test2)
test2 <- letter_matrix[86250000:86300000,]
View(test)
View(test)
test2 <- letter_matrix[86200000:86350000,]
View(test2)
View(test2)
gc_percentage_indices_38 = list()
for (i in 1:length(intervals)-1){
print(i)
gc_percentage_indices_38[[i]] <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[i])
}
gc_percentage_indices_38 = list()
for (i in 1:length(intervals)-1){
print(i)
gc_percentage_indices_38[[i]] <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[i] + 1)
}
for (i in 1:length(intervals)-1){
print(i)
gc_percentage_indices_38[[i]] <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[i+1])
}
intervals <- seq(from = 22.1, to = 72.7, by =.1)
intervals <- seq(from = 22.1, to = 72.7, by =.1)
gc_percentage_indices_38 = list()
for (i in 1:length(intervals)-1){
print(i)
gc_percentage_indices_38[[i]] <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[i+1])
}
intervals
gc_percentage_indices_38 = list()
for (i in 1:length(intervals)){
print(i)
gc_percentage_indices_38[[i]] <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[i+1])
}
gc_percentage_indices_38
autosomal_38[3651]
intervals <- seq(from = 22.1, to = 72.6, by =.1)
gc_percentage_indices_38 = list()
for (i in 1:length(intervals)){
gc_percentage_indices_38[[i]] <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[i+1])
}
indices.gc.percentages.h37 = indices.gc.percentages
indices.gc.percentages.h38 = gc_percentage_indices_38
min(sex_38[sex_38 > 1])
max(sex_38)
intervals <- seq(from = 32.7, to = 60.6, by =.1)
sex_chromosome_indices_38 = list()
for (i in 1:length(intervals)){
sex_chromosome_indices_38[[i]] <- which(autosomal_38 > intervals[i] & autosomal_38 < intervals[i+1])
}
sex_chromosome_indices_37 <- sex_chromosome_indices
devtools::use_data(gc_percentages_hg37, gc_percentages_hg38, indices.gc.percentages.h37, indices.gc.percentages.h38, sex_chromosome_indices_37, sex_chromosome_indices_38, overwrite = T,  internal = TRUE)
sampel1 <- bin_bam_sample(bam_filepath = "/Users/dirkdeweerd/BAMS/Illumina_0493_Akkoni_080_Exp1_S4_TTM.merged.dedup.bam")
corrected_sampel1 <- gc_correct(sampel1, method = "bin")
corrected_sampel1 <- gc_correct(sampel1, method = "bin")
corrected_sampel1 <- gc_correct(sampel1, method = "bin")
rm(letter_matrix)
library(NIPTeR)
corrected_sampel1 <- gc_correct(sampel1, method = "bin")
corrected_sampel1$autosomal_chromosome_reads[[1]]
corrected_sampel1 <- gc_correct(sampel1, method = "bin", include_XY = T)
corrected_sampel1$sex_chromosome_reads[[1]]
library(NIPTeR)
corrected_loess <- gc_correct(nipt_object = sampel1, include_XY = T)
corrected_loess$autosomal_chromosome_reads[[1]]
corrected_sampel1 <- gc_correct(sampel1, method = "bin", ref_genome = "hg38")
document()
?gc_correct
corrected_sampel1 <- gc_correct(sampel1, method = "bin", ref_genome = "hgsadas")
sysdata_backup <- list(gc_percentages_hg37, gc_percentages_hg38, indices.gc.percentages.h37, indices.gc.percentages.h38, sex_chromosome_indices_37, sex_chromosome_indices_38)
saveRDS(sysdata_backup, "/Users/dirkdeweerd/NIPT_R_Package/Data/sysdata_backup.rds")
sampel1 <- bin_bam_sample(bam_filepath = "/Users/dirkdeweerd/BAMS/Illumina_0493_Akkoni_080_Exp1_S4_TTM.merged.dedup.bam")
corrected_sampel1 <- gc_correct(sampel1, method = "bin", ref_genome = "hgsadas")
corrected_sampel1 <- gc_correct(sampel1, method = "bin", ref_genome = "hg38")
corrected_sampel1 <- gc_correct(sampel1, method = "bin", ref_genome = "hg37")
corrected_loess <- gc_correct(nipt_object = sampel1, include_XY = F)
library(NIPTeR)
corrected_sampel1 <- gc_correct(sampel1, method = "bin", ref_genome = "hg37")
corrected_sampel1 <- gc_correct(sampel1, method = "bin", ref_genome = "hg38")
corrected_sampel1 <- gc_correct(sampel1, method = "bin", ref_genome = "hgasdsdas")
library(NIPTeR)
corrected_loess <- gc_correct(nipt_object = sampel1, include_XY = F)
z_score_13
z_score_13$sample_Zscore
GetZExp <- function(x, z.obs, upper.lim, lower.lim) {
return(exp(-(( x -z.obs) ^2 / 2) ) / (upper.lim - lower.lim))
}
GetFetalUpperLower <- function(fetal, vc){
return ((fetal * 0.5) / vc)
}
CalculatePPV <- function(fetal.high, fetal.low, vc, z.obs, apriori){
upper <- GetFetalUpperLower(fetal.high, vc)
lower <- GetFetalUpperLower(fetal.low, vc)
fetal.perc <-integrate(GetZExp, lower, upper, lower.lim = lower, upper.lim = upper , z.obs = z.obs)
fetal.apriori <- fetal.perc$value * apriori
ppv.frac <- fetal.apriori + (1 - apriori) * exp(-(z.obs)^2/2)
ppv.perc <- ((fetal.apriori / ppv.frac) * 100)
return(ppv.perc)
}
GetPPV <- function(z.obs, apriori, cv){
ppv.perc.wide <- CalculatePPV(fetal.high.wide, fetal.low.wide, cv, z.obs, apriori)
ppv.perc.narrow <- CalculatePPV(fetal.high.narrow, fetal.low.narrow, cv, z.obs, apriori)
ppv.perc <- (ppv.perc.wide * 0.4 + ppv.perc.narrow * 0.6)
return(ppv.perc)
}
z_score_13$sample_Zscore
z_score_13$control_group_statistics
z_score_13$control_group_statistics[2]
z_score_13$#control_group_statistics
wd
z_score_13$control_group_statistics[2] / z_score_13$control_group_statistics[1]
regression_score_13$prediction_statistics
apply(X = regression_score_13$prediction_statistics, MARGIN = 2, FUN = function(x) x[1])
apply(X = regression_score_13$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = x[1], apriori = 200, cv = x[2]))
#range of fetal percentages
fetal.low.wide <- 1
fetal.high.wide <- 23
fetal.low.narrow <- 6
fetal.high.narrow <- 18
apply(X = regression_score_13$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = x[1], apriori = 200, cv = x[2]))
apply(X = regression_score_13$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = as.numeric(x[1]), apriori = 200, cv = as.numeric(x[2])))
apply(X = regression_score_13$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = as.numeric(x[1]), apriori = 1, cv = as.numeric(x[2])))
apply(X = regression_score_13$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = as.numeric(x[1]), apriori = 2, cv = as.numeric(x[2])))
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = as.numeric(x[1]), apriori = 200, cv = as.numeric(x[2])))
apply(X = regression_score_18$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = as.numeric(x[1]), apriori = 200, cv = as.numeric(x[2])))
apply(X = regression_score_18$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = as.numeric(x[1]), apriori = 2, cv = as.numeric(x[2])))
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = as.numeric(x[1]), apriori = 2, cv = as.numeric(x[2])))
regression_score_21$prediction_statistics
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = x[1], apriori = 2, cv = x[2]))
class(regression_score_21$prediction_statistics[1,1])
class(regression_score_21$prediction_statistics[1,2])
class(regression_score_21$prediction_statistics[2,2])
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = x[1], apriori = 2, cv = x[2]))
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = as.numeric(x[1]), apriori = 2, cv = as.numeric(x[2])))
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) (x[1]), (x[2])))
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) (x[1]), (x[2]))
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) (x[1]))
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) class((x[1])))
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) as.numeric((x[1])))
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) as.numeric((x[2])))
GetPPV(z.obs = 23.12725, apriori = 200, cv = 0.003069285)
GetPPV(z.obs = 23.12725, apriori = 2, cv = 0.003069285)
GetPPV(z.obs = 23.12725, apriori = 2, cv = 0.3069285)
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) as.numeric((x[2])*100))
GetZExp <- function(x, z.obs, upper.lim, lower.lim) {
return(exp(-(( x -z.obs) ^2 / 2) ) / (upper.lim - lower.lim))
}
GetFetalUpperLower <- function(fetal, vc){
return ((fetal * 0.5) / vc)
}
CalculatePPV <- function(fetal.high, fetal.low, vc, z.obs, apriori){
upper <- GetFetalUpperLower(fetal.high, (vc *100))
lower <- GetFetalUpperLower(fetal.low, (vc)*100))
fetal.perc <-integrate(GetZExp, lower, upper, lower.lim = lower, upper.lim = upper , z.obs = z.obs)
fetal.apriori <- fetal.perc$value * apriori
ppv.frac <- fetal.apriori + (1 - apriori) * exp(-(z.obs)^2/2)
ppv.perc <- ((fetal.apriori / ppv.frac) * 100)
return(ppv.perc)
}
GetPPV <- function(z.obs, apriori, cv){
ppv.perc.wide <- CalculatePPV(fetal.high.wide, fetal.low.wide, cv, z.obs, apriori)
ppv.perc.narrow <- CalculatePPV(fetal.high.narrow, fetal.low.narrow, cv, z.obs, apriori)
ppv.perc <- (ppv.perc.wide * 0.4 + ppv.perc.narrow * 0.6)
return(ppv.perc)
}
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = as.numeric(x[1]), apriori = 2, cv = as.numeric(x[2])))
GetZExp <- function(x, z.obs, upper.lim, lower.lim) {
return(exp(-(( x -z.obs) ^2 / 2) ) / (upper.lim - lower.lim))
}
GetFetalUpperLower <- function(fetal, vc){
return ((fetal * 0.5) / vc)
}
CalculatePPV <- function(fetal.high, fetal.low, vc, z.obs, apriori){
upper <- GetFetalUpperLower(fetal.high, (vc *100))
lower <- GetFetalUpperLower(fetal.low, (vc*100))
fetal.perc <-integrate(GetZExp, lower, upper, lower.lim = lower, upper.lim = upper , z.obs = z.obs)
fetal.apriori <- fetal.perc$value * apriori
ppv.frac <- fetal.apriori + (1 - apriori) * exp(-(z.obs)^2/2)
ppv.perc <- ((fetal.apriori / ppv.frac) * 100)
return(ppv.perc)
}
GetPPV <- function(z.obs, apriori, cv){
ppv.perc.wide <- CalculatePPV(fetal.high.wide, fetal.low.wide, cv, z.obs, apriori)
ppv.perc.narrow <- CalculatePPV(fetal.high.narrow, fetal.low.narrow, cv, z.obs, apriori)
ppv.perc <- (ppv.perc.wide * 0.4 + ppv.perc.narrow * 0.6)
return(ppv.perc)
}
apply(X = regression_score_21$prediction_statistics, MARGIN = 2, FUN = function(x) GetPPV(z.obs = as.numeric(x[1]), apriori = 2, cv = as.numeric(x[2])))
library(PPVforNIPT)
calculatePPV(nipt_result = regression_score_21, apriori = 200)
library(PPVforNIPT)
calculatePPV(nipt_result = regression_score_21, apriori = 200)
calculatePPV(nipt_result = regression_score_13, apriori = 200)
calculatePPV(nipt_result = regression_score_13, apriori = 2)
calculatePPV(nipt_result = regression_score_13, apriori = 1.1)
calculatePPV(nipt_result = regression_score_13, apriori = 1.00001)
calculatePPV(nipt_result = regression_score_18, apriori = 200)
calculatePPV(nipt_result = regression_score_18, apriori = 20)
calculatePPV(nipt_result = regression_score_18, apriori = 2)
calculatePPV(nipt_result = regression_score_18, apriori = 1.1)
calculatePPV(nipt_result = regression_score_18, apriori = 1.0000001)
calculatePPV(nipt_result = regression_score_18, apriori = 1.000000001)
calculatePPV(nipt_result = regression_score_18, apriori = 10)
regression_score_18$prediction_statistics
calculatePPV(nipt_result = regression_score_21, apriori = 200)
calculatePPV(nipt_result = regression_score_21, apriori = 2000)
calculatePPV(nipt_result = regression_score_21, apriori = 20000)
calculatePPV(nipt_result = regression_score_21, apriori = 200000)
calculatePPV(nipt_result = regression_score_21, apriori = 2000000)
calculatePPV(nipt_result = regression_score_21, apriori = 200000000)
calculatePPV(nipt_result = regression_score_21, apriori = 20000000000000000000)
calculatePPV(nipt_result = regression_score_21, apriori = 20000000000000000000000000000)
calculatePPV(nipt_result = regression_score_21, apriori = 2000000000000000000000000000000000000)
calculatePPV(nipt_result = regression_score_18, apriori = 1/10)
calculatePPV(nipt_result = regression_score_21, apriori = 1/20000)
calculatePPV(nipt_result = regression_score_21, apriori = 1/200000)
calculatePPV(nipt_result = regression_score_21, apriori = 1/20000000)
calculatePPV(nipt_result = regression_score_21, apriori = 1/20000000000)
calculatePPV(nipt_result = regression_score_21, apriori = 1/20000000000000)
calculatePPV(nipt_result = regression_score_21, apriori = 1/20000000000000000000)
calculatePPV(nipt_result = regression_score_18, apriori = 1/10)
calculatePPV(nipt_result = regression_score_18, apriori = 100)
calculatePPV(nipt_result = regression_score_18, apriori = 1/100)
calculatePPV(nipt_result = regression_score_18, apriori = 1/1.1)
regression_score_18$prediction_statistics
library(PPVforNIPT)
calculatePPV(regression_score_21, apriori = 200)
calculatePPV(regression_score_13, apriori = 200)
calculatePPV(regression_score_18, apriori = 200)
round(1.324324324324), digits = 3)
round(1.324324324324) digits = 3)
round(1.324324324324, digits = 3)
library(PPVforNIPT)
calculatePPV(regression_score_18, apriori = 200)
calculatePPV(regression_score_18, apriori = 200)
calculatePPV(regression_score_18, apriori = 20)
