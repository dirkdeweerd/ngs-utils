{
    "contents" : "#'Best matching control group by least sum of squares\n#' \n#'The matchcontrolgroup function determines how well an NIPTSample fits within the NIPTControlGroup \n#'@param nipt_sample The NIPTSample object that is the focus of the analysis\n#'@param nipt_control_group The NIPTControlGroup object used in the analysis\n#'@param mode The function mode. This can either be \\emph{\"subset\"} or \\emph{\"report\"}.\n#'Mode \\emph{\"subset\"} means the return value will be a new `NIPTControlGroup` object containing  \\emph{n}\n#'samples. When mode \\emph{\"report\"} is used the output is a matrix containing the sum of squares score \n#'of the differences between the chromosomal fractions of the sample and the control for every control \n#'sample, sorted in increasing score.\n#'@param n_of_samples The length of the resulting NIPTControlGroup. Only applicable if mode \\emph{\"subset\"} is used.\n#'  \n#'@param include_chromosomes integer. Include potential trisomic chromosomes into the comparison? Default = NULL,\n#' meaning chromosomes 13, 18 and 21 are not included\n#'@param exclude_chromosomes integer.Exclude other autosomal chromosomes besides chromosomes \n#'13, 18 and 21? Default = NULL\n#' \n#'@details \n#'The `matchcontrolgroup` function determines how well an NIPTSample fits within the NIPTControlGroup\n#'and, if needed, makes a subset `NIPTControlGroup` of length \\emph{n}.\n#' \n#'@return The output for mode \\emph{subset} is a new `NIPTControlGroup` composed of _n_ samples. \n#'The output for mode \\emph{report} is a matrix with a single column containing the sum of squares\n#'in ascending order.\n#' \n#' \n#' \n#' @export\nmatch_control_group <-function(nipt_sample, nipt_control_group, mode, n_of_samples, \n                             include_chromosomes = NULL, exclude_chromosomes = NULL)\n{\n  if (!is.null(include_chromosomes)){\n  control_chromosomes <- control_chromosomes[!control_chromosomes %in% exclude_chromosomes]\n  }\n  if (!is.null(include_chromosomes)){\n    control_chromosomes <- c(control_chromosomes, include_chromosomes)\n  }\n  nipt_control_group_samples <- nipt_control_group[[samples]]\n  control_group_fractions <- cbind(NULL, sapply(X = nipt_control_group_samples , FUN = chrfractions))\n  sample_fractions <- sapply(list(nipt_sample), chrfractions)\n  fractions_squared <- apply(X = control_group_fractions, MARGIN = 2, FUN = function(x, y) {(x - y)^2}, y = sample_fractions)\n  control_chromosomes <- getcontrolchromosomes(nipt_sample, control_chromosomes)\n  fractions_squared <- setrownamesmatrix(fractions_squared)\n  sum_of_squares <- apply(fractions_squared[control_chromosomes,], 2, sum)\n  if (mode == \"subset\"){\n  sorted_scores <- order(sum_of_squares)\n  return(as_control_group(nipt_samples = nipt_control_group[[samples]][sorted_scores[1:n_of_samples]], \n                   control_group_type = paste(\"Fitted to\", nipt_sample[[sample_name]])))\n  }\n  if (mode == \"report\"){\n    names(sum_of_squares) <- sapply(nipt_control_group[[samples]], getsamplenames)\n    sorted <- as.matrix(sort(sum_of_squares))\n    colnames(sorted) <- \"Sum_of_squares\"\n    return(sorted)\n  }\n  else{\n    stop(\"Invalid mode selected\", call. = F)\n  }\n}\n\n",
    "created" : 1446196528217.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3272044834",
    "id" : "906A8AAD",
    "lastKnownWriteTime" : 1446196561,
    "path" : "~/NIPTeR/NIPTeR/R/best_fit_beta.R",
    "project_path" : "R/best_fit_beta.R",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "type" : "r_source"
}