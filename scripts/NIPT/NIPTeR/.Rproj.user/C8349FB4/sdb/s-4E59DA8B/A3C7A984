{
    "contents" : "\ngc_correct_NIPTSample_bin <- function(nipt_object, include_XY, ref_genome ){\n  correct_sample_bin(nipt_object, include_XY = include_XY, ref_genome)\n}\ngc_correct_NIPTControlGroup_bin <- function(nipt_object, include_XY, ref_genome){\n  as_control_group(nipt_samples = lapply(nipt_object[[samples]], correct_sample_bin, \n                                         include_XY = include_XY, ref_genome))\n}\n\nGetMeanNumberOfReadsGcStep <- function(indices.gc.percentages, sample){\n  avg.reads.gc.set <- NULL  \n  for (i in 1:length(indices.gc.percentages))  {\n    reads <- sample[indices.gc.percentages[[i]]]\n    #If total number of reads in GC interval is not 0, determine average number of reads per bin, ignoring bins with no reads\n    if(sum(reads != 0))    {\n      avg.reads.gc.set[i] <- sum(reads) /length(reads[reads > 0])\n    }\n  }\n  return(avg.reads.gc.set)\n}\n#Corrects the number of reads in a given GC interval using the weights\nCorrectGcWithWeights <- function(sample, indices.gc.percentages, weights){\n  for (i in 1:length(indices.gc.percentages)){\n    #For a given GC interval, subset matching bins and correct with weight\n    sample[indices.gc.percentages[[i]]] <- sample[indices.gc.percentages[[i]]] * weights[i]\n  }\n  return(sample)\n}\n\ncorrect_sample_bin <- function(nipt_sample, include_XY, ref_genome){\n  sample <- Reduce(\"+\", nipt_sample[[autosomal_chromosome_reads]])\n\n  rownames(sample) <- autosomal_chromosomes\n  if (ref_genome == \"hg37\"){\n  gc_percentages <- gc_percentages_hg37\n  indices.gc.percentages <- indices.gc.percentages.h37\n  sex_chromosome_indices <- sex_chromosome_indices_37\n  }\n  if (ref_genome == \"hg38\"){\n  gc_percentages <- gc_percentages_hg38\n  indices.gc.percentages <- indices.gc.percentages.h38\n  sex_chromosome_indices <- sex_chromosome_indices_38\n  }\n  gc_percentages_autosomal <- gc_percentages[autosomal_chromosomes, ]\n  #remove reads which have no GC % count\n  no_gc_count <- which(gc_percentages_autosomal < 0)\n  sample[no_gc_count] <- 0\n  #Gets mean number of reads per bin for a GC interval\n  avg.reads.gc.interval <- GetMeanNumberOfReadsGcStep(indices.gc.percentages, sample)\n  #Calculates mean global average of n. of reads per bin\n  n.of.reads <- sample[(unlist(indices.gc.percentages))]\n  n.of.bins <- length(n.of.reads[n.of.reads > 0]) \n  global.mean.n.of.bins <- sum(sample) / n.of.bins\n    #Calculate weights\n  weights <- global.mean.n.of.bins / avg.reads.gc.interval\n  weights[which(is.na(weights))] <- 0\n  #Correct read counts using weights, forward and reverse apart\n  corrected_autosomal <- lapply(nipt_sample[[autosomal_chromosome_reads]], CorrectGcWithWeights, indices.gc.percentages = indices.gc.percentages,\n                            weights = weights)\n  if (include_XY == TRUE){\n    corrected_sex <- lapply(nipt_sample[[sex_chromosome_reads]], CorrectGcWithWeights, \n                                  indices.gc.percentages = sex_chromosome_indices,\n                                  weights = weights)\n  corrected_sample <- construct_sample(autosomal_reads = corrected_autosomal, sex_reads = corrected_sex, \n                                         name = nipt_sample[[sample_name]], correction_status_autosomal = c(nipt_sample[[correction_status_autosomal_chromosomes]],\n                                                                                                            GCcorrected),\n                                         correction_status_sex = c(nipt_sample[[correction_status_sex_chromosomes]], GCcorrected))\n  }\n  else{\n  corrected_sample <- construct_sample(autosomal_reads = corrected_autosomal, sex_reads = nipt_sample[[sex_chromosome_reads]], \n                                        name = nipt_sample[[sample_name]], correction_status_autosomal = c(nipt_sample[[correction_status_autosomal_chromosomes]], \n                                                                                                           GCcorrected),\n                                        correction_status_sex = c(nipt_sample[[correction_status_sex_chromosomes]]))\n  }\n  return (corrected_sample)\n}",
    "created" : 1446206500596.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2597864294",
    "id" : "A3C7A984",
    "lastKnownWriteTime" : 1446223760,
    "path" : "~/NIPTeR/NIPTeR/R/bin_gc_correct.R",
    "project_path" : "R/bin_gc_correct.R",
    "properties" : {
        "tempName" : "Untitled5"
    },
    "relative_order" : 14,
    "source_on_save" : false,
    "type" : "r_source"
}